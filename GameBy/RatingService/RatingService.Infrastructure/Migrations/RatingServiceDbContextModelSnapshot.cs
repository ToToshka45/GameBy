// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RatingService.Infrastructure.DataAccess;

#nullable disable

namespace RatingService.Infrastructure.Migrations
{
    [DbContext(typeof(RatingServiceDbContext))]
    partial class RatingServiceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("ratings")
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RatingService.Domain.Aggregates.EventInfo", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("events_info", "ratings");
                });

            modelBuilder.Entity("RatingService.Domain.Aggregates.UserInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("users_info", "ratings");
                });

            modelBuilder.Entity("RatingService.Domain.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer")
                        .HasColumnName("author_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<int>("EventId")
                        .HasColumnType("integer")
                        .HasColumnName("event_id");

                    b.Property<int?>("EventInfoId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int?>("UserInfoId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserInfoId1")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("EventInfoId");

                    b.HasIndex("UserInfoId");

                    b.HasIndex("UserInfoId1");

                    b.ToTable("feedbacks", "ratings");
                });

            modelBuilder.Entity("RatingService.Domain.Entities.Participant", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("EventId")
                        .HasColumnType("integer")
                        .HasColumnName("event_id");

                    b.Property<int?>("EventInfoId")
                        .HasColumnType("integer");

                    b.Property<string>("ParticipationState")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("participation_state");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("EventInfoId");

                    b.ToTable("participants", "ratings");
                });

            modelBuilder.Entity("RatingService.Domain.Entities.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EntityType")
                        .HasColumnType("integer")
                        .HasColumnName("entity_type");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer")
                        .HasColumnName("subject_id");

                    b.Property<float>("Value")
                        .HasColumnType("decimal(3,2)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.ToTable("ratings", "ratings");
                });

            modelBuilder.Entity("RatingService.Domain.Entities.RatingUpdate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer")
                        .HasColumnName("author_id");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("entity_type");

                    b.Property<int>("EventId")
                        .HasColumnType("integer")
                        .HasColumnName("event_id");

                    b.Property<int>("RatingId")
                        .HasColumnType("integer")
                        .HasColumnName("rating_id");

                    b.Property<int?>("RatingId1")
                        .HasColumnType("integer");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<float>("Value")
                        .HasColumnType("decimal(3,2)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("RatingId");

                    b.HasIndex("RatingId1");

                    b.ToTable("ratings_updates", "ratings");
                });

            modelBuilder.Entity("RatingService.Domain.Aggregates.EventInfo", b =>
                {
                    b.HasOne("RatingService.Domain.Entities.Rating", "Rating")
                        .WithOne()
                        .HasForeignKey("RatingService.Domain.Aggregates.EventInfo", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rating");
                });

            modelBuilder.Entity("RatingService.Domain.Entities.Feedback", b =>
                {
                    b.HasOne("RatingService.Domain.Aggregates.EventInfo", null)
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RatingService.Domain.Aggregates.EventInfo", null)
                        .WithMany("Feedbacks")
                        .HasForeignKey("EventInfoId");

                    b.HasOne("RatingService.Domain.Aggregates.UserInfo", null)
                        .WithMany("GamerFeedbacks")
                        .HasForeignKey("UserInfoId");

                    b.HasOne("RatingService.Domain.Aggregates.UserInfo", null)
                        .WithMany("OrganizerFeedbacks")
                        .HasForeignKey("UserInfoId1");

                    b.OwnsOne("RatingService.Domain.ValueObjects.Receiver", "Receiver", b1 =>
                        {
                            b1.Property<int>("FeedbackId")
                                .HasColumnType("integer");

                            b1.Property<string>("EntityType")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("FeedbackId");

                            b1.ToTable("feedbacks", "ratings");

                            b1.WithOwner()
                                .HasForeignKey("FeedbackId");
                        });

                    b.Navigation("Receiver")
                        .IsRequired();
                });

            modelBuilder.Entity("RatingService.Domain.Entities.Participant", b =>
                {
                    b.HasOne("RatingService.Domain.Aggregates.EventInfo", null)
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RatingService.Domain.Aggregates.EventInfo", null)
                        .WithMany("Participants")
                        .HasForeignKey("EventInfoId");

                    b.HasOne("RatingService.Domain.Entities.Rating", "Rating")
                        .WithOne()
                        .HasForeignKey("RatingService.Domain.Entities.Participant", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rating");
                });

            modelBuilder.Entity("RatingService.Domain.Entities.RatingUpdate", b =>
                {
                    b.HasOne("RatingService.Domain.Entities.Rating", null)
                        .WithMany()
                        .HasForeignKey("RatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RatingService.Domain.Entities.Rating", null)
                        .WithMany("Updates")
                        .HasForeignKey("RatingId1");
                });

            modelBuilder.Entity("RatingService.Domain.Aggregates.EventInfo", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Participants");
                });

            modelBuilder.Entity("RatingService.Domain.Aggregates.UserInfo", b =>
                {
                    b.Navigation("GamerFeedbacks");

                    b.Navigation("OrganizerFeedbacks");
                });

            modelBuilder.Entity("RatingService.Domain.Entities.Rating", b =>
                {
                    b.Navigation("Updates");
                });
#pragma warning restore 612, 618
        }
    }
}
