// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RatingService.Infrastructure.DataAccess;

#nullable disable

namespace RatingService.Infrastructure.Migrations
{
    [DbContext(typeof(RatingServiceDbContext))]
    [Migration("20241121191844_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RatingService.Domain.Aggregates.EventInfo", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("events_info", (string)null);
                });

            modelBuilder.Entity("RatingService.Domain.Aggregates.UserInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("users_info", (string)null);
                });

            modelBuilder.Entity("RatingService.Domain.Entities.EventRatingUpdate", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("events_rating_updates", (string)null);
                });

            modelBuilder.Entity("RatingService.Domain.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int?>("UserInfoId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserInfoId");

                    b.ToTable("feedbacks", (string)null);
                });

            modelBuilder.Entity("RatingService.Domain.Entities.Participant", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("ParticipationState")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("participants", (string)null);
                });

            modelBuilder.Entity("RatingService.Domain.Entities.Rating", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ratings", (string)null);
                });

            modelBuilder.Entity("RatingService.Domain.Entities.UserRatingUpdate", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("users_rating_updates", (string)null);
                });

            modelBuilder.Entity("RatingService.Domain.Aggregates.EventInfo", b =>
                {
                    b.HasOne("RatingService.Domain.Entities.Rating", "Rating")
                        .WithOne()
                        .HasForeignKey("RatingService.Domain.Aggregates.EventInfo", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rating");
                });

            modelBuilder.Entity("RatingService.Domain.Entities.EventRatingUpdate", b =>
                {
                    b.HasOne("RatingService.Domain.Entities.Rating", "Rating")
                        .WithOne()
                        .HasForeignKey("RatingService.Domain.Entities.EventRatingUpdate", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rating");
                });

            modelBuilder.Entity("RatingService.Domain.Entities.Feedback", b =>
                {
                    b.HasOne("RatingService.Domain.Aggregates.EventInfo", null)
                        .WithMany("Feedbacks")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RatingService.Domain.Aggregates.UserInfo", null)
                        .WithMany("OrganizerFeedbacks")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RatingService.Domain.Aggregates.UserInfo", null)
                        .WithMany("GamerFeedbacks")
                        .HasForeignKey("UserInfoId");

                    b.OwnsOne("RatingService.Domain.ValueObjects.FeedbackContent", "Content", b1 =>
                        {
                            b1.Property<int>("FeedbackId")
                                .HasColumnType("integer");

                            b1.Property<string>("Content")
                                .IsRequired()
                                .HasMaxLength(250)
                                .HasColumnType("character varying(250)");

                            b1.HasKey("FeedbackId");

                            b1.ToTable("feedbacks");

                            b1.WithOwner()
                                .HasForeignKey("FeedbackId");
                        });

                    b.OwnsOne("RatingService.Domain.ValueObjects.Receiver", "Receiver", b1 =>
                        {
                            b1.Property<int>("FeedbackId")
                                .HasColumnType("integer");

                            b1.HasKey("FeedbackId");

                            b1.ToTable("feedbacks");

                            b1.WithOwner()
                                .HasForeignKey("FeedbackId");
                        });

                    b.Navigation("Content")
                        .IsRequired();

                    b.Navigation("Receiver")
                        .IsRequired();
                });

            modelBuilder.Entity("RatingService.Domain.Entities.Participant", b =>
                {
                    b.HasOne("RatingService.Domain.Aggregates.EventInfo", null)
                        .WithMany("Participants")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RatingService.Domain.Entities.Rating", "Rating")
                        .WithOne()
                        .HasForeignKey("RatingService.Domain.Entities.Participant", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rating");
                });

            modelBuilder.Entity("RatingService.Domain.Entities.Rating", b =>
                {
                    b.HasOne("RatingService.Domain.Aggregates.UserInfo", null)
                        .WithMany("RatingsByCategory")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RatingService.Domain.Entities.UserRatingUpdate", b =>
                {
                    b.HasOne("RatingService.Domain.Entities.Rating", "Rating")
                        .WithOne()
                        .HasForeignKey("RatingService.Domain.Entities.UserRatingUpdate", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rating");
                });

            modelBuilder.Entity("RatingService.Domain.Aggregates.EventInfo", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Participants");
                });

            modelBuilder.Entity("RatingService.Domain.Aggregates.UserInfo", b =>
                {
                    b.Navigation("GamerFeedbacks");

                    b.Navigation("OrganizerFeedbacks");

                    b.Navigation("RatingsByCategory");
                });
#pragma warning restore 612, 618
        }
    }
}
